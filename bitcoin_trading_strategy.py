# -*- coding: utf-8 -*-
"""BitCoin_trading_strategy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1shxsQDKRROPTfQ3Ia1tQQVaMJYHPvI3t
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install pyforest
from pyforest import *
from matplotlib import pyplot as plt
import seaborn as sns
from sklearn.ensemble import ExtraTreesRegressor
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
import numpy as np
import sklearn.metrics
from pylab import rcParams
# %matplotlib inline
pd.set_option('display.max_columns', 500)
pd.set_option('display.max_rows', 500)
from google.colab import files

plt.style.use('ggplot')
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM, Dropout, GRU, Bidirectional
from keras.optimizers import SGD
import math
from sklearn.metrics import mean_squared_error
import pandas_datareader as web
import warnings
warnings.filterwarnings("ignore")
pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 150)
!pip install yfinance

import yfinance as yf

btc = yf.Ticker("BTC-USD")
# get historical market data
hist = btc.history(period="max")
df = hist[['Open', 'High', 'Low', 'Close', 'Volume']]
print(df.tail()); print(); print(df.shape)

df = df.sort_index(ascending=True)
df.head()

df.describe()

df['Close'].hist(bins=30, figsize=(10,5)).axvline(df['Close'].mean(), 
                                                 color='b', linestyle='dashed', linewidth=2)
plt.show()

fig = go.Figure(data=[go.Candlestick(x=df.index[-30:],
                                     open=df['Open'][-30:],
                                     high=df['High'][-30:],
                                     low=df['Low'][-30:],
                                     close=df['Close'][-30:])])
fig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)
fig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)
fig.update_layout(title='Last 30 days BTC price', yaxis_title='BTC (US$)')
fig.show()

btc = df[['Close']]
btc['daily_difference'] = btc['Close'].diff()
btc.head()

btc['signal'] = 0.0
btc['signal'] = np.where(btc['daily_difference'] > 0, 1.0, 0.0)
btc.head()

btc['positions'] = btc['signal'].diff()
btc.head()

btc.positions.value_counts()

# For each day where open price > 0, we set the signal 1 means sell  and < 0, we set signal 0, to buy 

print('\033[4mFor each day where Close price = Buy = red arrow head  and Sell = green arrow head \033[0m')
buys = btc.loc[btc['positions'] == 1]
sells = btc.loc[btc['positions'] == -1]

# Plot 
fig = plt.figure(figsize=(15, 5))
plt.plot(btc.index, btc['Close'], color = 'gray', lw=2., label='Close price')

# Plot the buy and sell signals on the same plot
plt.plot(buys.index, btc.loc[buys.index]['Close'], '^', markersize=3, color='r',
          label='Buy')
plt.plot(sells.index, btc.loc[sells.index]['Close'], 'v', markersize=3, 
         color='g', label='Sell')
plt.ylabel('BTC Price (USD)')
plt.xlabel('Date')
plt.title('Buy and sell signals plot')
plt.legend(loc=0)

# Display everything
plt.show()

# Initialize the short and long windows
short_window = 10
long_window = 30

# Initialize the `signals` DataFrame with the `signal` column
trade = btc[['Close']]
trade['signal'] = 0.0

# Create short simple moving average over the short window
trade['short_ma'] = btc['Close'].rolling(window=short_window).mean()

# Create long simple moving average over the long window
trade['long_ma'] = btc['Close'].rolling(window=long_window).mean()
# Create signals
trade['signal'][short_window:] = np.where(trade['short_ma'][short_window:] < trade['long_ma'][short_window:], 1.0, 0.0)   

# Generate trading orders
trade['positions'] = trade['signal'].diff()

# Print `signals`
print(trade.tail())

#.dropna(inplace=True)
trade.positions.value_counts()

plt.style.use('dark_background')
buys = trade.loc[trade['positions'] == 1]
sells = trade.loc[trade['positions'] == -1]

# Plot 
fig = plt.figure(figsize=(15, 5))
plt.plot(trade.index, trade['Close'], color='g', lw=.5, label='Close price')
# Plot the short and long moving averages
plt.plot(trade[['short_ma', 'long_ma']])
plt.plot(buys.index, trade.loc[buys.index]['Close'],
         '^', markersize=7, color='red', label='Buy')
plt.plot(sells.index, trade.loc[sells.index]['Close'],
         'v', markersize=7, color='blue', label = 'Sell')
plt.ylabel('BTC Price (USD)')
plt.xlabel('Date')
plt.legend(["Price","Short mavg","Long mavg","Buy","Sell"])
plt.title("Dual SMA Strategy")

# Display everything
plt.show()

#print('\033[4mLast 5 Buy signal \033[0m')
#buy = (round(trade.loc[buys.index], 2)['Close'])
#buy = buy.reset_index()
#buy

#print('\033[4mLast 5 Sell signal \033[0m')
#sell = (round(trade.loc[sells.index], 2)['Close'])
#sell = sell.reset_index()
#sell

df.tail()

def trading_strategy(df, window_size):
    #newSt = pd.DataFrame(index=df.index)
    newSt = df[['Close']]
    newSt['orders'] = 0
    # window_size-days high
    newSt['High'] = df['Close'].shift(1).rolling(window=window_size).max()
    # window_size-days low
    newSt['Low'] = df['Close'].shift(1).rolling(window=window_size).min()
    # window_size-days mean
    newSt['Avg'] = df['Close'].shift(1).rolling(window=window_size).mean()

    # entry rule : stock price > the higest value for window_size day
    #              stock price < the lowest value for window_size day

    newSt['long_entry'] = df['Close'] > newSt.High
    newSt['short_entry'] = df['Close'] < newSt.Low

    #exit rule : the stock price crosses the mean of past window_size days.

    newSt['long_exit'] = df['Close'] < newSt.Avg
    newSt['short_exit'] = df['Close'] > newSt.Avg

    init=True
    position=0
    for k in range(len(newSt)):
        if newSt['long_entry'][k] and position==0:
            newSt.orders.values[k] = 1
            position=1
        elif newSt['short_entry'][k] and position==0:
            newSt.orders.values[k] = -1
            position=-1
        elif newSt['short_exit'][k] and position>0:
            newSt.orders.values[k] = -1
            position = 0
        elif newSt['long_exit'][k] and position < 0:
            newSt.orders.values[k] = 1
            position = 0
        else:
            newSt.orders.values[k] = 0

    return newSt

#newSt = df[['Close']]
#newSt

#ts

ts=trading_strategy(df, 24)

buys = ts.loc[ts['orders'] == 1]
sells = ts.loc[ts['orders'] == -1]

fig = plt.figure(figsize=(15,6))
plt.plot(df["Close"], color='g', lw=.5)
plt.plot(ts["High"], color='g', lw=.5)
plt.plot(ts["Low"], color='r', lw=.5)
plt.plot(ts["Avg"], color='b', lw=.5)
plt.plot(buys.index, ts.loc[buys.index]['Close'],
         '^', markersize=5, color='blue', label='Buy')
plt.plot(sells.index, ts.loc[sells.index]['Close'],
         'v', markersize = 3, color='r', label = 'Sell')
plt.legend(["Price","Highs","Lows","Average","Buy","Sell"])
plt.title("Bitcoin New Trading Strategy")

plt.show()

ts.orders.value_counts()